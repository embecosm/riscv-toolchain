# Board specification for the RISC-V GDB server

# Copyright (C) 2018 Embecosm Limited.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

set_board_info target_install  {$target_triplet}

# routines needed to communicate with the board via GDB.
load_generic_config "gdb_stub"

# this is how we detect pass or fail
set gdb_print_return_code "print /u \$a0"

# We need some extra and modified procs for testing through GDB. These
# supplement or override the standard procs.
search_and_load_file "library file" "gdb-stub-extra.exp" ${boards_dir}
search_and_load_file "library file" "gdb-extra.exp" ${boards_dir}
search_and_load_file "library file" "remote-extra.exp" ${boards_dir}

# No default multilib options are needed for this board.
process_multilib_options ""

# The compiler used to build for this board. This has *nothing* to do
# with what compiler is tested if we're testing gcc.
set_board_info compiler "[find_gcc]"

# I also supplied cflags and ldflags along the same lines as riscv-sim
set_board_info cflags   "[libgloss_include_flags] [newlib_include_flags]"
set_board_info ldflags  "[libgloss_link_flags] [newlib_link_flags]"

# This board doesn't use a linker script.
set_board_info ldscript ""

# The flavors of debug we support
set DEBUG_TORTURE_OPTIONS {-gdwarf-2}

# We don't need a status wrapper, we extract the result by looking at
# registers when we have breakpointed _exit, exit and abort.
set_board_info needs_status_wrapper 0

# Configure for a slow simulator
set_board_info is_simulator 1
set_board_info slow_simulator 1

# Configure specially for testing via GDB
set_board_info gdb_run_command "continue"
set_board_info gdb_protocol "remote"
set_board_info gdb,start_symbol "_start"
if { [info exists env(RISCV_TIMEOUT) ] } {
    set_board_info gdb,remote_timeout "$env(RISCV_TIMEOUT)"
} else {
    set_board_info gdb,remote_timeout "60"
}

if { [info exists env(RISCV_CORE) ] } {
    set riscv_corename "$env(RISCV_CORE)"
} else {
    set riscv_corename "gdbsim"
}

set_board_info use_gdb_stub 1

set_board_info netport "| riscv$env(RISCV_XLEN)-gdbserver -c $riscv_corename --stdin"
set GDB "riscv$env(RISCV_XLEN)-unknown-elf-gdb"

# RISCV_TRACE contains a comma separated list of trace flags, martial them
# into a tcl list in the board_info here.
if { [info exists env(RISCV_TRACE) ] } {
    set trace_flags [split $env(RISCV_TRACE) ,]
    set_board_info target_trace "$trace_flags"
}

# GDB tool specific settings
if { [info exists env(RISCV_GDB_TIMEOUT) ] } {
    set gdb_test_timeout $env(RISCV_GDB_TIMEOUT)
} else {
    set gdb_test_timeout 60
}

set_board_info gdb,can_reverse 0
set_board_info gdb,nofileio 1
set_board_info gdb,noinferiorio 1
set_board_info gdb,noresults 1
set_board_info gdb,nosignals 1
set_board_info gdb,skip_huge_test 0
set_board_info gdb,skip_float_tests 0
set_board_info gdb,use_precord 0
set_board_info noargs 1
set_board_info gdb,exit_is_reliable 0
set_board_info gdb,no_thread_names 1
set_board_info gdb,no_self_modifying_code 1


#set_board_info gdb,no_long_long 1
#set_board_info gdb,short_int 0

set_board_info gdb,no_trampolines 1

# Temporarily tell GDB that we don't support calling target functions.
# We'll need to fix this later.
set_board_info gdb,cannot_call_functions 1

set_board_info debug_flags "-g3"
